/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Userinterface.Professional;

import Business.AirCondition.AirCondition;
import Userinterface.StateOfficial.*;
import Business.EcoSystem;
import Business.Employee.Citizen;
import Business.Employee.Employee;
import Business.Enterprise.CitizenEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.VitalSign.VitalSign;
import Business.VitalSign.VitalSignHistory;
import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author jinliyu
 */
public class ViewHealthRateJPanel extends javax.swing.JPanel {

    private JPanel upc;
    private EcoSystem system;
    private Network network;

    /**
     * Creates new form ViewHealthRateJPanel
     */
    public ViewHealthRateJPanel(JPanel upc, Network network) {
        initComponents();
        this.system = system;
        this.upc = upc;
        this.network = network;
        
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        jButton5.setText("<<back");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Normal/Abnormal chart");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Sys Blood Pressure Result Chart");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Heart Rate Collection Result chart");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Weight Result Chart");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton1.setText("View Details");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Malayalam MN", 0, 18)); // NOI18N
        jLabel6.setText("view the most recent result");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jButton5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton8)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(200, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel6)
                .addGap(37, 37, 37)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8)
                .addGap(12, 12, 12)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(11, 11, 11)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        upc.remove(this);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.previous(upc);  // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    @SuppressWarnings("UnnecessaryBoxing")
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
       
            int num = 0;
            int normalNum = 0;

            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise instanceof CitizenEnterprise) {
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for (Employee employee : organization.getEmployeeDirectory().getEmployeeList()) {
                            Citizen c = (Citizen) employee;
                            num = num + 1;
                            VitalSignHistory vsh = new VitalSignHistory();
                            VitalSign vs = c.getVitalSignHistory().getVitalSignHistory().get(vsh.getVitalSignHistory().size());
                            String result = vs.getResult();
                            if (result.equals("Normal")) {
                                normalNum = normalNum + 1;
                            }

                        }
                    }
                }
            }
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            dataset.setValue(normalNum, "Number", "Normal");
            dataset.setValue(num - normalNum, "Number", "Abnormal");
            JFreeChart chart = ChartFactory.createBarChart("Citizens' Health Examination Result", "Result", "Number", dataset, PlotOrientation.VERTICAL, false, true, false);
            CategoryPlot p = chart.getCategoryPlot();
            p.setRangeGridlinePaint((Color.black));
            ChartFrame frame = new ChartFrame("bar chart for citizens' examination result", chart);
            frame.setVisible(true);
            frame.setSize(450, 350);
        
            


        
// TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        ViewDetailJPanel msjp = new ViewDetailJPanel(upc, network);
        upc.add("ViewdetailJPanel", msjp);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.next(upc);// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        int num = 0;
        int normalNum = 0;

        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (enterprise instanceof CitizenEnterprise) {
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    for (Employee employee : organization.getEmployeeDirectory().getEmployeeList()) {
                        Citizen c = (Citizen) employee;
                        num = num + 1;
                        VitalSignHistory vsh = new VitalSignHistory();
                        VitalSign vs = c.getVitalSignHistory().getVitalSignHistory().get(vsh.getVitalSignHistory().size());
                        String result = vs.getIsHeartRateNormal();
                        if (result.equals("Normal")) {
                            normalNum = normalNum + 1;
                        }

                    }
                }
            }
        }
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(normalNum, "Number", "Normal");
        dataset.setValue(num - normalNum, "Number", "Abnormal");
        JFreeChart chart = ChartFactory.createBarChart("Citizens' Heart Rate Examination Result", "Result", "Number", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint((Color.black));
        ChartFrame frame = new ChartFrame("bar chart for citizens' Heart Rate examination result", chart);
        frame.setVisible(true);
        frame.setSize(450, 350);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        int num = 0;
        int normalNum = 0;

        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (enterprise instanceof CitizenEnterprise) {
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    for (Employee employee : organization.getEmployeeDirectory().getEmployeeList()) {
                        Citizen c = (Citizen) employee;
                        num = num + 1;
                        VitalSignHistory vsh = new VitalSignHistory();
                        VitalSign vs = c.getVitalSignHistory().getVitalSignHistory().get(vsh.getVitalSignHistory().size());
                        String result = vs.getIsBloodPressureNormal();
                        if (result.equals("Normal")) {
                            normalNum = normalNum + 1;
                        }

                    }
                }
            }
        }
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(normalNum, "Number", "Normal");
        dataset.setValue(num - normalNum, "Number", "Abnormal");
        JFreeChart chart = ChartFactory.createBarChart("Citizens' SysbloodPressure Examination Result", "Result", "Number", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint((Color.black));
        ChartFrame frame = new ChartFrame("bar chart for citizens' SysbloodPressure examination result", chart);
        frame.setVisible(true);
        frame.setSize(450, 350);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        int num = 0;
        int normalNum = 0;

        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (enterprise instanceof CitizenEnterprise) {
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    for (Employee employee : organization.getEmployeeDirectory().getEmployeeList()) {
                        Citizen c = (Citizen) employee;
                        num = num + 1;
                        VitalSignHistory vsh = new VitalSignHistory();
                        VitalSign vs = c.getVitalSignHistory().getVitalSignHistory().get(vsh.getVitalSignHistory().size());
                        String result = vs.getIsWeightNormal();
                        if (result.equals("Normal") || result.equals("/")) {
                            normalNum = normalNum + 1;
                        }

                    }
                }
            }
        }
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(normalNum, "Number", "Normal");
        dataset.setValue(num - normalNum, "Number", "Abnormal");
        JFreeChart chart = ChartFactory.createBarChart("Citizens' Weight Examination Result", "Result", "Number", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint((Color.black));
        ChartFrame frame = new ChartFrame("bar chart for citizens' weight examination result", chart);
        frame.setVisible(true);
        frame.setSize(450, 350); // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel6;
    // End of variables declaration//GEN-END:variables
}
